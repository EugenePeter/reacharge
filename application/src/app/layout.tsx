import "./globals.css";
import { Inter } from "next/font/google";
import localFont from "next/font/local";
import StyledComponentsRegistry from "./lib/registry";
import { getClient, query } from "./lib/client";
import { GET_THEME } from "../utils/getHostThemes/gql";
import { BaseProvider } from "../context/BaseProvider";
import { theme } from "@/design-system";

// import { device } from "@/utils";

const inter = Inter({ subsets: ["latin"] });
import { headers } from "next/headers";
export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

const materialSymbols = localFont({
  variable: "--font-family-symbols", // Variable name (to reference after in CSS/styles)
  style: "normal",
  src: "../../node_modules/material-symbols/material-symbols-rounded.woff2", // This is a reference to woff2 file from NPM package "material-symbols"
  display: "block",
  weight: "100 700",
});

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const headersList = headers();
  const host = headersList.get("");

  const userAgent = headersList.get("user-agent");

  // Let's check if the device is a mobile device
  let isMobileView = userAgent!.match(
    /Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile|WPDesktop/i
  );

  const isAndroid = () => Boolean(userAgent!.match(/Android/i));
  const isIos = () => Boolean(userAgent!.match(/iPhone/i));
  const isOpera = () => Boolean(userAgent!.match(/Opera Mini/i));
  const isWindows = () => Boolean(userAgent!.match(/IEMobile/i));
  const isSSR = () => Boolean(userAgent!.match(/SSR/i));
  const isMobile = () =>
    Boolean(isAndroid() || isIos() || isOpera() || isWindows());
  const isTablet = () => Boolean(userAgent!.match(/iPad/i));
  const isDesktop = () => Boolean(!isMobile() && !isSSR());

  const whichDevice = {
    isMobile: isMobile(),
    isTablet: isTablet(),
    isDesktop: isDesktop(),
  };

  const { data, ...rest } = await query({
    query: GET_THEME,
    variables: {
      host: "localhost:3000",
    },
  });

  return (
    <html lang="en" className={`${materialSymbols.variable}`}>
      <head></head>
      <body className={inter.className}>
        <h1>{host}</h1>
        <BaseProvider theme={theme ?? {}} device={whichDevice}>
          <StyledComponentsRegistry>{children}</StyledComponentsRegistry>
        </BaseProvider>
      </body>
    </html>
  );
}
